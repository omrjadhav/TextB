package com.example.textb.data

import com.example.textb.data.models.Book
import com.example.textb.data.models.BookData
import com.example.textb.data.models.ProfileData
import io.github.jan.supabase.SupabaseClient
import io.github.jan.supabase.postgrest.postgrest
import io.github.jan.supabase.postgrest.query.Columns
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlinx.serialization.json.Json
import java.math.BigDecimal

class BookRepository {
    private val supabaseClient: SupabaseClient = SupabaseClientManager.getClient()
    private val authRepository = AuthRepository()
    
    // Configure JSON to ignore unknown keys and handle parsing issues
    private val json = Json { 
        ignoreUnknownKeys = true 
        coerceInputValues = true
        isLenient = true
    }
    
    suspend fun getAllBooks(): Result<List<Book>> = withContext(Dispatchers.IO) {
        try {
            val booksData = supabaseClient
                .postgrest
                .from("books")
                .select(columns = Columns.ALL)
                .decodeList<BookData>()
            
            val books = booksData.map { bookData ->
                convertBookDataToBook(bookData)
            }
            
            Result.success(books)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
    
    suspend fun getUserBooks(): Result<List<Book>> = withContext(Dispatchers.IO) {
        try {
            // Get current user ID from auth repository
            val currentUserId = authRepository.getCurrentUser()
                ?: return@withContext Result.failure(Exception("No user logged in"))
            
            val booksData = supabaseClient
                .postgrest
                .from("books")
                .select(columns = Columns.ALL)
                .decodeList<BookData>()
            
            // Filter in memory using user ID
            val filteredBooks = booksData.filter { bookData -> bookData.seller_id == currentUserId }
            
            val books = filteredBooks.map { bookData ->
                convertBookDataToBook(bookData)
            }
            
            Result.success(books)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
    
    private suspend fun ensureProfileExists(): Result<Boolean> = withContext(Dispatchers.IO) {
        try {
            // Get current user ID from auth repository
            val currentUserId = authRepository.getCurrentUser()
                ?: return@withContext Result.failure(Exception("No user logged in"))
            
            // Check if profile exists in Supabase
            val profiles = supabaseClient
                .postgrest
                .from("profiles")
                .select(columns = Columns.ALL)
                .decodeList<ProfileData>()
            
            // Filter in memory using user ID
            val profileExists = profiles.any { profile -> profile.id == currentUserId }
            
            // If profile doesn't exist, create it
            if (!profileExists) {
                val profileData = ProfileData(
                    id = currentUserId,
                    name = "",
                    email = "",
                    phone = "",
                    university = "",
                    major = "",
                    profile_image_url = ""
                )
                
                supabaseClient.postgrest.from("profiles").insert(profileData)
            }
            
            Result.success(true)
        } catch (e: Exception) {
            Result.failure(Exception("Failed to ensure profile exists: ${e.message}"))
        }
    }
    
    suspend fun addBook(title: String, author: String, subject: String, price: Double, imageUrl: String? = null): Result<Book> = withContext(Dispatchers.IO) {
        try {
            // Ensure profile exists before adding a book
            ensureProfileExists().getOrThrow()
            
            // Get current user ID from auth repository
            val currentUserId = authRepository.getCurrentUser()
                ?: return@withContext Result.failure(Exception("No user logged in"))
            
            // Create book data
            val bookData = BookData(
                id = null, // Will be generated by Supabase
                title = title,
                author = author,
                subject = subject,
                price = price,
                seller_id = currentUserId,
                image_url = imageUrl,
                created_at = null, // Will be generated by Supabase
                updated_at = null  // Will be generated by Supabase
            )
            
            // Insert book into Supabase
            supabaseClient
                .postgrest
                .from("books")
                .insert(bookData)
            
            // Convert to Book model
            val book = Book(
                id = "pending", // Will be updated when fetched from the database
                title = title,
                author = author,
                subject = subject,
                price = price,
                sellerId = currentUserId,
                imageUrl = imageUrl
            )
            
            Result.success(book)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
    
    suspend fun searchBooks(query: String): Result<List<Book>> = withContext(Dispatchers.IO) {
        try {
            val booksData = supabaseClient
                .postgrest
                .from("books")
                .select(columns = Columns.ALL)
                .decodeList<BookData>()
            
            // Filter in memory
            val filteredBooks = booksData.filter { bookData ->
                bookData.title.contains(query, ignoreCase = true) ||
                bookData.author.contains(query, ignoreCase = true) ||
                bookData.subject.contains(query, ignoreCase = true)
            }
            
            val books = filteredBooks.map { bookData ->
                convertBookDataToBook(bookData)
            }
            
            Result.success(books)
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
    
    private fun convertBookDataToBook(bookData: BookData): Book {
        return Book(
            id = bookData.id ?: "unknown",
            title = bookData.title,
            author = bookData.author,
            subject = bookData.subject,
            price = bookData.price,
            sellerId = bookData.seller_id,
            imageUrl = bookData.image_url
        )
    }
}
